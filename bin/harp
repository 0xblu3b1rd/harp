#!/usr/bin/env node

var pkg = require("../package.json")
var yargs = require('yargs')
var util = require('util')
var chalk = require("chalk")

yargs.alias('p', 'port')
yargs.alias('i', 'ip')
yargs.alias('b', 'boilerplate')

if(yargs.argv._.length === 0 || yargs.argv.hasOwnProperty("help")){
  console.log()
  console.log(chalk.bold("  Harp ") + chalk.grey("v" + pkg.version))
  console.log()
  console.log(chalk.grey("  Usage:"))
  console.log("    harp <project> [domain|dir]")
  console.log()
  console.log(chalk.grey("  Commands:"))
  console.log("    harp <project>            Starts development server on project directory")
  console.log("    harp <project> [domain]   Deploys project directory to the web")
  console.log("    harp <project> [dir]      Compiles project directory to output directory")
  console.log()
  console.log(chalk.grey("  Options:"))
  console.log("    -p,   --port              Specify port for server to listen on (9000)")
  console.log("    -i,   --ip                I.P. address for server to bind to (127.0.0.1)")
  console.log()
  console.log(chalk.grey("  Examples:"))
  console.log("    harp . -p 9001            Starts server on current directory on port 9001")
  console.log("    harp . example.com        Deploys current directory to `example.com`")
  console.log("    harp src www              Compiles `src` directory to `www` directory")
  console.log("    harp . _                  Deploy to random generated domain (via prompt)")
  console.log("    harp src ./example.com    Compiles to local directory named `example.com`")
  console.log()
  console.log(chalk.grey("  Platform Commands:"))
  console.log("    harp <cmd>                list, remove, login, logout, whoami")
  console.log()
  process.exit()
}


/**
 * Legacy CLI
 */

if(yargs.argv._[0] === "init") {
  console.log()
  console.log("    Run '" + yargs.argv['$0'], (yargs.argv._[1] || "<dir>") + "'", "to create project.")
  console.log()
  process.exit()
}

if(yargs.argv._[0] === "server") {
  console.log()
  console.log("    Run '" + yargs.argv['$0'], (yargs.argv._[1] || "<dir>") + "'", "to start the server.")
  console.log()
  process.exit()
}

if(yargs.argv._[0] === "compile") {
  console.log()
  console.log("    Run '" + yargs.argv['$0'], (yargs.argv._[1] || "<source>"), (yargs.argv._[2] || "<output>") + "'", "to compile.")
  console.log()
  process.exit()
}


var read = require("read")

var findOrCreate = function(next){
  var p = yargs.argv._[0]
  var projectPath     = nodePath.resolve(yargs.argv._[0])
  var boilerplatePath = nodePath.resolve(__dirname, "..", "lib", "default_boilerplate")
  var repo            = yargs.argv.boilerplate || "harp-boilerplates/default"
  repo.match(/\//) || (repo = "harp-boilerplates/"+repo)

  fse.readdir(projectPath, function(err, contents){
    console.log()
    console.log("Harp v" + pkg.version)
    console.log()
    if (err || contents.length <1){
      console.log("No project found at", projectPath)
      read({ prompt: "Please choose boilerplate to clone:", default: repo, edit: true }, function(err, repo){
        if (err) {
          console.log()
          console.log("Clone cancelled")
          process.exit(1)
        }

        repo.match(/\//) || (repo = "harp-boilerplates/"+repo)

        // mkdirp
        fse.mkdirp(projectPath, function(err){
          if (err) return process.exit(1)
            console.log()
            console.log("    cloning:", repo)
            downloadRepo(repo, projectPath, function(err) {
              if (!err) return next()

              if (util.isError(err) && err['code'] === 'ENOTFOUND') {
                console.error("You're not connected to the Internet, so we'll use the default boilerplate.")
                fse.copy(boilerplatePath, projectPath, function(err){
                  if (err) return err
                  return next()
                })
              } else {
                return console.error("Boilerplate not found:", "https://github.com/"+repo)
              }
            })
        })
      })
    } else {
      // console.log("    project:", p)
      return next()
    }
  })
}

var isDomain = function(destination){
  if (destination == "_")
    return true

  if (destination.indexOf("./") === 0)
    return false

  if (destination.split(".").length > 1)
    return true

  return false
}

var compileOrPublish = function(){
  if (yargs.argv._.length > 1) {
    var destination = yargs.argv._[1]
    if (isDomain(destination)){
      surge.publish(hooks)(yargs.argv)
    } else {
      console.log("compiling\n ", nodePath.resolve(yargs.argv._[0]), "\nto...\n ", nodePath.resolve(destination))
      harp.compile(nodePath.resolve(yargs.argv._[0]), nodePath.resolve(destination), function(errors, reply){
        if(errors) {
          console.log(JSON.stringify(errors, null, 2))
          process.exit(1)
        } else {
          console.log("done")
        }
      })
    }
  } else {
    server()
  }
}


var server = function(){
  var projectPath = nodePath.resolve(yargs.argv._[0])
  var ip          = yargs.argv.ip || '0.0.0.0'
  var port        = yargs.argv.port || 9000

  harp.server(projectPath, { ip: ip, port: port }, function(err){
    var address = ''
    if(ip == '0.0.0.0' || ip == '127.0.0.1') {
      address = 'localhost'
    } else {
      address = ip
    }

    var hostUrl = "http://" + address + ":" + port + "/"
    console.log("    serving:", hostUrl)
    console.log()
    console.log("press (ctl+c) to stop the server")
  })
}


// init - harp foo
// init - harp foo bar
// server - harp foo

// findOrCreate -> compileOrPublish -> exit
// findOrCreate -> startServer

var nodePath      = require("path")
var program       = require("commander")
var fse           = require("fs-extra")
var downloadRepo  = require("download-github-repo")
var helpers       = require("../lib/helpers")
var harp          = require("../")
var tmp           = require('tmp')
var surge         = require('surge')({ platform: "harpjs.com", name: "Harp Platform" })


/**
 * Surge Integration
 */

var hooks = {

  postProject: function(req, next){
    tmp.dir(function(err, outputPath, cleanupCallback) {
      harp.compile(req.project, outputPath, function(errors, output){
        if(errors) {
          console.log(errors)
          process.exit(1)
        } else {
          req.src     = req.project
          req.project = outputPath
          next()
        }
      })
    })
  },

  postPublish: function(req, next){
    fse.remove(req.project, function(){
      next()
    })
  }

}

/**
 * Account
 */

if(yargs.argv._[0] === "whoami") {
  surge.whoami(hooks)(yargs.argv._.slice(1))
} else if(yargs.argv._[0] === "login") {
  surge.login(hooks)(yargs.argv._.slice(1))
} else if(yargs.argv._[0] === "logout") {
  surge.logout(hooks)(yargs.argv._.slice(1))
} else if(yargs.argv._[0] === "list") {
  surge.list(hooks)(yargs.argv._.slice(1))
} else if(yargs.argv._[0] === "teardown") {
  surge.teardown(hooks)(yargs.argv._.slice(1))
} else {
  findOrCreate(compileOrPublish)
}

